%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2382 559
%%HiResBoundingBox: 0 0 2382 558.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2382 558.95996 re
W
q
[0.24 0 0 -0.24 0 558.95996] cm
q
0 0 9925 2328.125 re
W*
q
[3.124951 0 0 3.124951 0.0742581 0] cm
/DeviceRGB {} CS
[0.9804 0.9804 0.9804] SC
/DeviceRGB {} cs
[0.9804 0.9804 0.9804] sc
0 0 3175.6587 744.79297 re
f
Q
q
[80.439468 0 0 80.439468 274.53671 143.606705] cm
/DeviceRGB {} CS
[0.0275 0.4078 0.6235] SC
/DeviceRGB {} cs
[0.0275 0.4078 0.6235] sc
4.64 16.719999 m
4.72 5.639999 l
6.64 5.639999 l
6.52 20.079998 l
3.54 20.079998 l
1.92 8.899998 l
1.92 20.079998 l
-0 20.079998 l
-0 5.639998 l
3.1 5.639998 l
4.64 16.719999 l
h
14.0745 12.46 m
11.3145 12.46 l
11.3145 18.1 l
14.0945 18.1 l
14.0945 20 l
9.414499 20 l
9.414499 5.72 l
14.0945 5.72 l
14.0945 7.62 l
11.3145 7.62 l
11.3145 10.56 l
14.0745 10.56 l
14.0745 12.460001 l
14.0745 12.46 l
h
24.709 5.72 m
26.629 5.72 l
24.768999 20 l
22.789 20 l
21.789 12.84 l
20.848999 20 l
18.868999 20 l
16.868999 5.72 l
18.789 5.72 l
19.828999 13.08 l
20.788998 5.72 l
22.708998 5.72 l
23.748997 13.08 l
24.709 5.72 l
h
32.143501 20.120001 m
30.623501 20.120001 29.403502 18.880001 29.403502 17.380001 c
29.403502 15.200001 l
31.343502 15.200001 l
31.343502 17.380001 l
31.343502 17.820002 31.703503 18.18 32.143501 18.18 c
32.5835 18.18 32.9235 17.82 32.9235 17.380001 c
32.9235 15.480001 l
29.4035 10.620001 l
29.4035 8.140001 l
29.4035 6.620001 30.623499 5.380001 32.143501 5.380001 c
33.643501 5.380001 34.863503 6.620001 34.863503 8.140001 c
34.863503 10.300001 l
32.923504 10.300001 l
32.923504 8.140001 l
32.923504 7.680001 32.583504 7.340001 32.143505 7.340001 c
31.703506 7.340001 31.343506 7.680001 31.343506 8.140001 c
31.343506 9.960001 l
34.863506 14.820002 l
34.863506 17.380001 l
34.863506 18.880001 33.643505 20.120001 32.143505 20.120001 c
32.143501 20.120001 l
h
f
Q
q
[21.538563 0 0 21.538563 3699.1599 248.96629] cm
/DeviceRGB {} CS
[0.0275 0.4078 0.6235] SC
/DeviceRGB {} cs
[0.0275 0.4078 0.6235] sc
44.873001 2.446 m
31.408001 -3.367 23.404001 12.259 30.753002 21.609001 c
32.175999 11.937 38.708 7.375 44.873001 2.446 c
h
14.616 23.625999 m
11.144 25.532 9.702 29.469 5.539001 30.684999 c
7.137001 38.262001 0.898001 44.931 7.556001 38.752998 c
7.556001 31.693998 l
13.717001 28.325998 17.991001 18.080997 27.727001 21.607998 c
24.676001 17.336998 26.686001 8.235998 25.710001 4.461998 c
20.508001 5.904998 15.602001 11.005999 18.649002 17.572998 c
13.015002 14.558998 1.261002 18.805998 2.512003 22.615997 c
4.809 20.716 13.539 20.959999 14.616 23.625999 c
h
13.945 38.752998 m
13.945 38.752998 16.822001 34.152 21.257999 31.777998 c
22.081999 31.336998 13.272999 31.777998 13.272999 31.777998 c
13.945 38.752998 l
h
33.778999 21.608 m
39.354 14.408 48.195 10.472 61.011002 10.514 c
53.389999 -4.303 31.962 11.711 33.778999 21.608 c
h
67.063004 36.737 m
63.363003 26.605999 48.667004 23.722 34.789005 25.641998 c
62.300003 32.442997 30.520004 60.891998 34.789005 75.063004 c
36.821007 81.812004 49.883003 86.346001 61.011005 82.123001 c
37.987007 77.630005 62.198006 37.099003 45.883003 28.669003 c
66.574005 34.329002 43.616005 70.473999 58.993004 73.046005 c
54.744003 70.265007 55.352005 67.347008 55.944004 66.030006 c
61.257 56.311001 71.667999 49.348 67.063004 36.737 c
h
35.797001 22.617001 m
54.567001 19.228001 69.761002 27.465 72.106003 43.797001 c
86.420998 15.989 49.034 5.956 35.797001 22.617001 c
h
34.789001 28.667999 m
42.957001 38.737 37.325001 55.009998 20.667002 51.863998 c
21.803001 54.761997 20.872002 59.728996 22.686001 61.949997 c
24.313002 55.511997 29.326 52.451996 38.822998 53.880997 c
42.994999 47.098999 43.973999 30.482 34.789001 28.667999 c
h
17.584999 68.788002 m
17.488998 68.857002 17.342999 68.986 17.139 69.187004 c
16.535 69.646004 15.776 69.950005 14.768 70.002007 c
14.686999 69.988007 14.61 69.972008 14.533999 69.952003 c
13.999 69.514 10.763 66.784004 10.573 64.469002 c
10.722 64.249001 10.962 64.020004 11.354 63.855003 c
11.392 63.844002 11.427 63.833004 11.465 63.821003 c
13.803001 63.592003 14.506001 64.998001 16.634001 64.975006 c
16.031 63.180008 19.589001 60.787006 16.634001 59.934006 c
10.775001 66.434006 -1.368999 58.370007 4.531001 49.848007 c
0.899001 49.578007 -0.328999 51.712006 -3.536999 51.865005 c
3.212001 61.589005 10.657002 70.615005 21.676001 76.072006 c
20.541 73.172005 21.473001 68.206009 19.66 65.986008 c
18.962999 66.914001 18.403 67.981003 17.584999 68.788002 c
h
f
Q
q
[80.658348 0 0 80.658348 5407.8086 135.976639] cm
/DeviceRGB {} CS
[0.0275 0.4078 0.6235] SC
/DeviceRGB {} cs
[0.0275 0.4078 0.6235] sc
8.6145 20 m
7.0545 20 5.7745 18.74 5.7745 17.16 c
5.7745 15.7 l
7.6745 15.7 l
7.6745 17.16 l
7.6745 17.68 8.0945 18.1 8.6145 18.1 c
9.134501 18.1 9.5345 17.68 9.5345 17.16 c
9.5345 5.66 l
11.4545 5.66 l
11.4545 17.16 l
11.4545 18.74 10.174501 20 8.6145 20 c
h
17.169001 20.040001 m
15.549001 20.040001 14.229 18.720001 14.229 17.1 c
14.229 5.740001 l
16.129 5.740001 l
16.129 17.1 l
16.129 17.68 16.588999 18.16 17.168999 18.16 c
17.748999 18.16 18.209 17.68 18.209 17.1 c
18.209 5.740001 l
20.108999 5.740001 l
20.108999 17.1 l
20.108999 18.720001 18.789 20.040001 17.168999 20.040001 c
17.169001 20.040001 l
h
27.5235 16.719999 m
27.6035 5.639999 l
29.5235 5.639999 l
29.4035 20.079998 l
26.4235 20.079998 l
24.803499 8.899998 l
24.803499 20.079998 l
22.883499 20.079998 l
22.883499 5.639998 l
25.9835 5.639998 l
27.5235 16.719999 l
h
35.198002 20.16 m
34.758003 20.16 l
33.358002 20.16 32.238003 19.039999 32.238003 17.639999 c
32.238003 7.999999 l
32.238003 6.599999 33.358002 5.459999 34.758003 5.459999 c
35.198002 5.459999 l
36.598003 5.459999 37.718002 6.599999 37.718002 7.999999 c
37.718002 9.019999 l
35.758003 9.019999 l
35.758003 7.999999 l
35.758003 7.659998 35.518002 7.419999 35.198002 7.419999 c
34.758003 7.419999 l
34.458004 7.419999 34.178001 7.659999 34.178001 7.999999 c
34.178001 17.639999 l
34.178001 17.939999 34.458 18.219999 34.758003 18.219999 c
35.198002 18.219999 l
35.518002 18.219999 35.758003 17.939999 35.758003 17.639999 c
35.758003 12.44 l
34.638004 12.44 l
34.638004 10.5 l
37.718002 10.5 l
37.718002 17.639999 l
37.718002 19.039999 36.598003 20.16 35.198002 20.16 c
h
42.372501 18.120001 m
45.1325 18.120001 l
45.1325 20 l
40.4925 20 l
40.4925 5.64 l
42.372501 5.64 l
42.372501 18.119999 l
42.372501 18.120001 l
h
52.567001 12.46 m
49.807003 12.46 l
49.807003 18.1 l
52.587002 18.1 l
52.587002 20 l
47.907001 20 l
47.907001 5.72 l
52.587002 5.72 l
52.587002 7.62 l
49.807003 7.62 l
49.807003 10.56 l
52.567001 10.56 l
52.567001 12.460001 l
52.567001 12.46 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
